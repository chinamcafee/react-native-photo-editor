apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'
apply plugin: "org.jetbrains.kotlin.plugin.parcelize"

group = 'tech.wenchuan.rnphotoeditor'
version = '0.1.0'

def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
apply from: expoModulesCorePlugin
applyKotlinExpoModulesCorePlugin()
useCoreDependencies()
useExpoPublishing()

// If you want to use the managed Android SDK versions from expo-modules-core, set this to true.
// The Android SDK versions will be bumped from time to time in SDK releases and may introduce breaking changes in your module code.
// Most of the time, you may like to manage the Android SDK versions yourself.
def useManagedAndroidSdkVersions = false
if (useManagedAndroidSdkVersions) {
    useDefaultAndroidSdkVersions()
} else {
    buildscript {
        // Simple helper that allows the root project to override versions declared by this library.
        ext.safeExtGet = { prop, fallback ->
            rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
        }

        // Ensures backward compatibility
        ext.getKotlinVersion = {
            if (ext.has("kotlinVersion")) {
                ext.kotlinVersion()
            } else {
                ext.safeExtGet("kotlinVersion", "1.8.10")
            }
        }

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${getKotlinVersion()}")
        }
    }
    project.android {
        compileSdkVersion safeExtGet("compileSdkVersion", 34)
        defaultConfig {
            minSdkVersion safeExtGet("minSdkVersion", 26)
            targetSdkVersion safeExtGet("targetSdkVersion", 34)
        }
    }
}

android {
    namespace "tech.wenchuan.rnphotoeditor"
    defaultConfig {
        minSdkVersion safeExtGet("minSdkVersion", 26)
        targetSdkVersion safeExtGet("targetSdkVersion", 34)
        versionCode 1
        versionName "0.1.0"
    }
    lintOptions {
        abortOnError false
    }
//    publishing {
//        singleVariant("release") {
//            withSourcesJar()
//        }
//    }

    buildFeatures {
        viewBinding true
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':expo-modules-core')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"
    implementation 'com.facebook.react:react-android:0.74.5'
    implementation 'androidx.core:core-ktx:1.13.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation "androidx.activity:activity-ktx:1.9.0"
    implementation "androidx.fragment:fragment-ktx:1.6.2"
    implementation "androidx.recyclerview:recyclerview:1.3.2"
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.11'
    implementation 'com.google.android.material:material:1.11.0'
    implementation "com.google.android.exoplayer:exoplayer:2.19.1"
    implementation "com.github.bumptech.glide:glide:4.16.0"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation group: 'com.alibaba.fastjson2', name: 'fastjson2', version: '2.0.49'


    api 'io.coil-kt:coil:2.4.0'
    api 'com.google.code.gson:gson:2.10.1'
    api 'androidx.fragment:fragment-ktx:1.6.2'
}
